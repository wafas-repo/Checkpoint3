Wafa Qazi 
April 11, 2021

===================
PROGRAM DESCRIPTION
===================
      â€¢ Code Generation for C- programs.


=========================
BUILDING AND TESTING PLAN
=========================

This program uses both jflex and CUP as part of the application. These must be installed on
your system for the build to be successful. These build instructions also assume that javac is
a usable command on your computer, and that you are building on a Linux environment.

Building
-----------

  Note that you need to modify the paths for CLASSPATH, JFLEX, and CUP in 
the Makefile so that the related commands can be found on your particular 
machine. 

  To build the parser, type "make" in the current directory, which will 
generate an executable program called "CM".

  If youd like to produce a syntax-tree for the input file you will need to 
  add a "-a" flag to the command line.

  If youd like to produce the symbol table for the input file you will need to 
  add a "-s" flag to the command line.

  If youd like to produce generated code for the imput file you will need to 
  add a "-c" flag to the command line. 

  For example, to test source code like "fac.cm", type 

    "java -cp java/java-cup-11b.jar:. CM -s -a testfiles/fac.cm " 

  Sytax tree and symbol table output will be redirected to .sym and .abs files respectively.

  To rebuild the parser, type "make clean" and type "make" again.

  Also note that all the abstract syntax tree structures are defined under
the directory "absyn" and the methods for showing a syntax tree is implemented
by the visitor pattern in "ShowTreeVisitor.java".  Since some java files are 
generated automatically, they may contain variables that are not used, which 
are safe to ignore in the compilation process.


Testing 
-----------

  This parser is meant to take C- programs as input files. We have provided
  [0123456789].cm files to test with, however any C- program files will work. 

  Make sure if you are generating assembly code you add the -s along with -a
  to make sure code gennerated contains no semantic errors.


====================
FURTHER IMPROVEMENTS
====================

1. could improve on our code structure and handle the symbol table more efficiently 
2. More in depth type checking could be done for the funtion parameters 
3. Add code optimization for cleaner more efficient assembly code

