/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, OVER;
terminal EQ, COMPARE, NEQ, LT, LTE, GT, GTE;
terminal COMMA, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, SEMI;
terminal String ID, NUM;
terminal ERROR;

non terminal program;  
non terminal Exp exp, factor, stmt, return_stmt, selection_stmt, iteration_stmt;
non terminal ExpList arg_list, stmt_list; 
non terminal CompoundExp comp_stmt;
non terminal Var var;
non terminal VarDecList loc_dec, param_list;
non terminal VarDec var_dec, param;
non terminal NameTy type_specifier;
non terminal Dec fun_dec;
non terminal DecList dec_list;

precedence nonassoc LT, GT, EQ, COMPARE, NEQ, LTE, GTE;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left  ELSE;


/* ----------------------------Grammar Section-------------------- */
   
start with program;  

program	     ::=  dec_list:e
                  {: RESULT = e; :}
                ;

dec_list      ::= dec_list:dec var_dec:vd
                  {: DecList d = dec;
                     while(d.tail != null)
                       d = d.tail;
                     d.tail = new DecList(vd, null);
                     RESULT = dec; 
                  :}
                | dec_list:dl fun_dec:fd
                  {: DecList d = dl;
                     while(d.tail != null)
                       d = d.tail;
                     d.tail = new DecList(fd, null);
                     RESULT = dl; 
                  :}
                | var_dec:v
                  {: RESULT = new DecList(v, null); :}
                | fun_dec:f
                  {: RESULT = new DecList(f, null); :}
                | error:e
                   {:
                    parser.report_error("Syntax error in Declaration List", e);
                    RESULT = null;
                  :}
                ; 

var_dec       ::= type_specifier:t ID:i SEMI
                 {:RESULT = new SimpleDec(tleft, t, i); :}
                | type_specifier:t ID:i LBRACK NUM:n RBRACK SEMI
                 {:RESULT = new ArrayDec(tleft, t, i, new IntExp(nleft, nright, n)); :}
                | error:e ID:i SEMI
                  {: parser.report_error("Invalid syntax in variable declaration", e);
                   RESULT = null; :}  
                | type_specifier:t error:e SEMI
                  {: parser.report_error("Invalid syntax in variable declaration", e);
                   RESULT = null; :}
                ;

type_specifier ::= INT:i
                   {: RESULT = new NameTy(ileft, NameTy.INT); :}
                 | VOID:v
                   {: RESULT = new NameTy(vleft, NameTy.VOID); :}
                 ;

fun_dec        ::= type_specifier:t ID:i LPAREN param_list:pl RPAREN comp_stmt:c
                   {: RESULT = new FunctionDec(tleft, t, i, pl, c); :}
                 | type_specifier:t ID:i LPAREN VOID RPAREN comp_stmt:c
                   {: RESULT = new FunctionDec(tleft, t, i, null, c); :}
                 | type_specifier:t ID:i LPAREN param_list:pl RPAREN error:e
                   {: report_error("Function Declaration error", e);
                      RESULT = null; :}
                 ;

param_list     ::= param_list:pl COMMA param:p
                  {: VarDecList v = pl;
                     while(v.tail != null)
                       v = v.tail;
                     v.tail = new VarDecList(p, null);
                     RESULT = pl;   
                  :}
                 | param:z
                   {: RESULT = new VarDecList(z, null); :}
                 | error:e
                   {:
                    parser.report_error("Syntax error in parameters of function declaration", e);
                    RESULT = null;
                  :}
                 ;

param          ::= type_specifier:t ID:i
                   {: RESULT = new SimpleDec(tleft, t, i); :}
                 | type_specifier:t ID:i LBRACK RBRACK
                   {: RESULT = new ArrayDec(tleft, t, i, null); :}
                 ;

comp_stmt     ::= LBRACE:l loc_dec:d  stmt_list:s RBRACE
                  {: RESULT = new CompoundExp(lleft, d, s); :}
                 ;

loc_dec        ::= loc_dec:ld var_dec:vd
                  {: VarDecList v = ld;
                     while(v.tail != null)
                       v = v.tail;

                     v.tail = new VarDecList(vd, null);
                     RESULT = ld;   
                  :}
                 | 
                  {: RESULT = new VarDecList(null, null); :}
                 ;

stmt_list      ::= stmt_list:sl stmt:s
                   {: ExpList t = sl;
                      while( t.tail != null )
                        t = t.tail;
                      t.tail = new ExpList(s, null);
                      RESULT = sl;  
                  :}
                 |
                   {: RESULT = new ExpList(null, null); :}
                 ;

stmt           ::= exp:e SEMI
                   {: RESULT = e; :}
                 | SEMI:s
                   {: RESULT = new NilExp(sleft); :}
                 | comp_stmt:c
                   {: RESULT = c; :}
                 | selection_stmt:s
                   {: RESULT = s; :}
                 | iteration_stmt:i
                   {: RESULT = i; :}
                 | return_stmt:r 
                   {: RESULT = r; :}
                 ;

selection_stmt ::= IF:i LPAREN exp:e RPAREN stmt:s
                   {: RESULT = new IfExp(ileft, e, s, null); :}
                 | IF:i LPAREN exp:e RPAREN stmt:s ELSE stmt:s2
                   {: RESULT = new IfExp(ileft, e, s, s2); :}
                 ;

iteration_stmt ::= WHILE:w LPAREN exp:e RPAREN stmt:s
                   {: RESULT = new WhileExp(wleft, e, s); :}
                 ;

return_stmt    ::= RETURN:r exp:e SEMI
                   {: RESULT = new ReturnExp(rleft, e); :}
                 | RETURN:r SEMI
                   {: RESULT = new ReturnExp(rleft, new NilExp(rleft)); :}
                 ;

exp            ::= var:v EQ exp:e
                   {: RESULT = new AssignExp(vleft, v, e); :}
                 | exp:s1 LTE exp:s2
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LTE, s2); :}
                 | exp:s1 LT exp:s2
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LT, s2); :} 
                 | exp:s1 GT exp:s2 
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GT, s2); :}
                 | exp:s1 GTE exp:s2
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GTE, s2); :} 
                 | exp:s1 COMPARE exp:s2 
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.COMPARE, s2); :}
                 | exp:s1 NEQ exp:s2 
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.NEQ, s2); :}
                 | exp:s1 PLUS exp:s2
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.PLUS, s2); :}
                 | exp:s1 MINUS exp:s2
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.MINUS, s2); :} 
                 | exp:s1 TIMES exp:s2
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.TIMES, s2); :}
                 | exp:s1 OVER exp:s2
                   {: RESULT = new OpExp(s1left, s1right, s1, OpExp.OVER, s2); :} 
                 | factor:f
                   {: RESULT = f; :}
                 ;

var            ::= ID:i
                   {: RESULT = new SimpleVar(ileft, i); :}
                 | ID:i LBRACK exp:e RBRACK
                   {: RESULT = new IndexVar(ileft, i, e); :}
                 ;    

factor         ::= LPAREN exp:e RPAREN
                   {: RESULT = e; :}
                 | var:v
                   {: RESULT = new VarExp(vleft, v); :}
                 | ID:i LPAREN arg_list:a RPAREN
                   {: RESULT = new CallExp(ileft, i, a); :}
                 | ID:i LPAREN RPAREN
                   {: RESULT = new CallExp(ileft, i, null); :}
                 | NUM:n
                   {: RESULT = new IntExp(nleft, nright, n); :}
                 ;

arg_list       ::= arg_list:a COMMA exp:e
                   {: ExpList t = a;
                      while( t.tail != null )
                        t = t.tail;
                      t.tail = new ExpList(e, null);
                      RESULT = a;  
                   :}
                 | exp:e
                   {: RESULT = new ExpList(e, null); :}
                 ;
