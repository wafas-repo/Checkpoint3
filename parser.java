
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import absyn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\023" +
    "\004\000\002\023\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\017\005\000\002\017\010\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\021\003\000\002\021\003\000\002\022\010\000\002\022" +
    "\010\000\002\022\010\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\020\004\000\002\020\006\000" +
    "\002\013\006\000\002\015\004\000\002\015\002\000\002" +
    "\012\004\000\002\012\002\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\007\007\000" +
    "\002\007\011\000\002\010\007\000\002\006\005\000\002" +
    "\006\004\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\003\000\002" +
    "\014\003\000\002\014\006\000\002\004\005\000\002\004" +
    "\003\000\002\004\006\000\002\004\005\000\002\004\003" +
    "\000\002\011\005\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\010\003\006\006\012\010\010\001\002\000" +
    "\004\002\161\001\002\000\012\002\000\003\037\006\012" +
    "\010\010\001\002\000\014\002\ufffb\003\ufffb\006\ufffb\010" +
    "\ufffb\035\145\001\002\000\012\002\ufffc\003\ufffc\006\ufffc" +
    "\010\ufffc\001\002\000\006\003\ufff4\035\ufff4\001\002\000" +
    "\006\003\015\035\014\001\002\000\006\003\ufff5\035\ufff5" +
    "\001\002\000\012\002\ufffd\003\ufffd\006\ufffd\010\ufffd\001" +
    "\002\000\012\003\017\026\022\030\020\034\021\001\002" +
    "\000\004\034\016\001\002\000\034\002\ufff7\003\ufff7\004" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\026\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\001\002\000\034\002" +
    "\ufff6\003\ufff6\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\026\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\001" +
    "\002\000\004\036\154\001\002\000\034\002\ufffa\003\ufffa" +
    "\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\026\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\001\002\000\010" +
    "\003\024\006\012\010\026\001\002\000\006\025\147\027" +
    "\150\001\002\000\006\025\uffee\027\uffee\001\002\000\006" +
    "\025\uffef\027\uffef\001\002\000\006\027\033\035\ufff4\001" +
    "\002\000\004\035\030\001\002\000\010\025\uffed\027\uffed" +
    "\030\031\001\002\000\004\031\032\001\002\000\006\025" +
    "\uffec\027\uffec\001\002\000\004\032\034\001\002\000\032" +
    "\003\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\026" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\001\002" +
    "\000\012\002\ufff2\003\ufff2\006\ufff2\010\ufff2\001\002\000" +
    "\032\003\037\004\uffe7\006\012\007\uffe7\010\010\011\uffe7" +
    "\026\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\001" +
    "\002\000\004\035\145\001\002\000\006\003\015\035\144" +
    "\001\002\000\032\003\uffea\004\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\026\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\001\002\000\026\003\060\004\051\007\046\011" +
    "\045\026\052\032\034\033\043\034\044\035\053\036\054" +
    "\001\002\000\036\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\026\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\001\002\000\030\003\uffe5\004" +
    "\uffe5\005\uffe5\007\uffe5\011\uffe5\026\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\001\002\000\004\026\140\001" +
    "\002\000\012\026\052\034\135\035\053\036\054\001\002" +
    "\000\030\003\uffe4\004\uffe4\005\uffe4\007\uffe4\011\uffe4\026" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\001\002" +
    "\000\030\012\072\013\066\014\076\015\074\017\073\020" +
    "\071\021\077\022\070\023\075\024\067\034\134\001\002" +
    "\000\004\026\126\001\002\000\010\026\052\035\053\036" +
    "\054\001\002\000\044\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\113\027\uffce\030\112\031\uffce\034\uffce" +
    "\001\002\000\036\012\uffc8\013\uffc8\014\uffc8\015\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\027\uffc8\031\uffc8\034\uffc8\001\002\000\030\003\uffe1\004" +
    "\uffe1\005\uffe1\007\uffe1\011\uffe1\026\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\001\002\000\036\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\027\uffcf\031\uffcf\034\uffcf\001" +
    "\002\000\030\003\uffe3\004\uffe3\005\uffe3\007\uffe3\011\uffe3" +
    "\026\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\001" +
    "\002\000\030\003\uffe0\004\uffe0\005\uffe0\007\uffe0\011\uffe0" +
    "\026\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\001" +
    "\002\000\030\003\uffe2\004\uffe2\005\uffe2\007\uffe2\011\uffe2" +
    "\026\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\001" +
    "\002\000\040\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\064" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\027\uffcb\031\uffcb\034\uffcb\001\002\000\026\003\uffe8" +
    "\004\uffe8\007\uffe8\011\uffe8\026\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\001\002\000\010\026\052\035\053" +
    "\036\054\001\002\000\022\012\072\013\066\014\076\015" +
    "\074\025\uffda\027\uffda\031\uffda\034\uffda\001\002\000\010" +
    "\026\052\035\053\036\054\001\002\000\010\026\052\035" +
    "\053\036\054\001\002\000\010\026\052\035\053\036\054" +
    "\001\002\000\010\026\052\035\053\036\054\001\002\000" +
    "\010\026\052\035\053\036\054\001\002\000\010\026\052" +
    "\035\053\036\054\001\002\000\010\026\052\035\053\036" +
    "\054\001\002\000\010\026\052\035\053\036\054\001\002" +
    "\000\010\026\052\035\053\036\054\001\002\000\010\026" +
    "\052\035\053\036\054\001\002\000\022\012\072\013\066" +
    "\014\076\015\074\025\uffd8\027\uffd8\031\uffd8\034\uffd8\001" +
    "\002\000\036\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027" +
    "\uffd1\031\uffd1\034\uffd1\001\002\000\022\012\072\013\066" +
    "\014\076\015\074\025\uffd7\027\uffd7\031\uffd7\034\uffd7\001" +
    "\002\000\036\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027" +
    "\uffd0\031\uffd0\034\uffd0\001\002\000\022\012\072\013\066" +
    "\014\076\015\074\025\uffd5\027\uffd5\031\uffd5\034\uffd5\001" +
    "\002\000\036\012\uffd3\013\uffd3\014\076\015\074\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\031\uffd3\034\uffd3\001\002\000\022\012\072\013\066" +
    "\014\076\015\074\025\uffd4\027\uffd4\031\uffd4\034\uffd4\001" +
    "\002\000\022\012\072\013\066\014\076\015\074\025\uffd9" +
    "\027\uffd9\031\uffd9\034\uffd9\001\002\000\022\012\072\013" +
    "\066\014\076\015\074\025\uffd6\027\uffd6\031\uffd6\034\uffd6" +
    "\001\002\000\036\012\uffd2\013\uffd2\014\076\015\074\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\027\uffd2\031\uffd2\034\uffd2\001\002\000\010\026\052\035" +
    "\053\036\054\001\002\000\012\026\052\027\114\035\053" +
    "\036\054\001\002\000\036\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\027\uffc9\031\uffc9\034\uffc9\001\002\000\006\025" +
    "\117\027\120\001\002\000\032\012\072\013\066\014\076" +
    "\015\074\017\073\020\071\021\077\022\070\023\075\024" +
    "\067\025\uffc6\027\uffc6\001\002\000\010\026\052\035\053" +
    "\036\054\001\002\000\036\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\027\uffca\031\uffca\034\uffca\001\002\000\032\012" +
    "\072\013\066\014\076\015\074\017\073\020\071\021\077" +
    "\022\070\023\075\024\067\025\uffc7\027\uffc7\001\002\000" +
    "\030\012\072\013\066\014\076\015\074\017\073\020\071" +
    "\021\077\022\070\023\075\024\067\031\123\001\002\000" +
    "\040\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\027" +
    "\uffcd\031\uffcd\034\uffcd\001\002\000\030\012\072\013\066" +
    "\014\076\015\074\017\073\020\071\021\077\022\070\023" +
    "\075\024\067\027\125\001\002\000\036\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\027\uffcc\031\uffcc\034\uffcc\001\002" +
    "\000\010\026\052\035\053\036\054\001\002\000\030\012" +
    "\072\013\066\014\076\015\074\017\073\020\071\021\077" +
    "\022\070\023\075\024\067\027\130\001\002\000\024\003" +
    "\060\004\051\007\046\011\045\026\052\032\034\034\044" +
    "\035\053\036\054\001\002\000\030\003\uffdf\004\uffdf\005" +
    "\132\007\uffdf\011\uffdf\026\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\001\002\000\024\003\060\004\051\007" +
    "\046\011\045\026\052\032\034\034\044\035\053\036\054" +
    "\001\002\000\030\003\uffde\004\uffde\005\uffde\007\uffde\011" +
    "\uffde\026\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\001\002\000\030\003\uffe6\004\uffe6\005\uffe6\007\uffe6\011" +
    "\uffe6\026\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\001\002\000\030\003\uffdb\004\uffdb\005\uffdb\007\uffdb\011" +
    "\uffdb\026\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\001\002\000\030\012\072\013\066\014\076\015\074\017" +
    "\073\020\071\021\077\022\070\023\075\024\067\034\137" +
    "\001\002\000\030\003\uffdc\004\uffdc\005\uffdc\007\uffdc\011" +
    "\uffdc\026\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\001\002\000\010\026\052\035\053\036\054\001\002\000" +
    "\030\012\072\013\066\014\076\015\074\017\073\020\071" +
    "\021\077\022\070\023\075\024\067\027\142\001\002\000" +
    "\024\003\060\004\051\007\046\011\045\026\052\032\034" +
    "\034\044\035\053\036\054\001\002\000\030\003\uffdd\004" +
    "\uffdd\005\uffdd\007\uffdd\011\uffdd\026\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\001\002\000\010\003\017\030" +
    "\020\034\021\001\002\000\004\034\146\001\002\000\034" +
    "\002\ufff8\003\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\026\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\001\002\000\006\006\012\010\010\001\002\000\006\003" +
    "\151\032\034\001\002\000\012\002\ufff1\003\ufff1\006\ufff1" +
    "\010\ufff1\001\002\000\012\002\ufff3\003\ufff3\006\ufff3\010" +
    "\ufff3\001\002\000\006\025\ufff0\027\ufff0\001\002\000\004" +
    "\031\155\001\002\000\004\034\156\001\002\000\034\002" +
    "\ufff9\003\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\026\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\001" +
    "\002\000\012\002\ufffe\003\ufffe\006\ufffe\010\ufffe\001\002" +
    "\000\012\002\uffff\003\uffff\006\uffff\010\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\014\002\003\017\012\021\010\022\006\023" +
    "\004\001\001\000\002\001\001\000\010\017\157\021\010" +
    "\022\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\022\020\024\021\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\034\001\001\000\004\015\035" +
    "\001\001\000\002\001\001\000\010\012\041\017\040\021" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\047\004\055\005\062\006\054\007" +
    "\056\010\060\013\046\014\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\135\004" +
    "\055\014\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\123\004\055\014\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\064\004\055\014\061\001\001\000\002\001\001\000" +
    "\010\003\110\004\055\014\061\001\001\000\010\003\107" +
    "\004\055\014\061\001\001\000\010\003\106\004\055\014" +
    "\061\001\001\000\010\003\105\004\055\014\061\001\001" +
    "\000\010\003\104\004\055\014\061\001\001\000\010\003" +
    "\103\004\055\014\061\001\001\000\010\003\102\004\055" +
    "\014\061\001\001\000\010\003\101\004\055\014\061\001" +
    "\001\000\010\003\100\004\055\014\061\001\001\000\010" +
    "\003\077\004\055\014\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\121" +
    "\004\055\014\061\001\001\000\012\003\115\004\055\011" +
    "\114\014\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\120\004\055\014\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\126\004\055\014\061\001\001\000\002\001\001" +
    "\000\022\003\047\004\055\005\130\006\054\007\056\010" +
    "\060\013\046\014\061\001\001\000\002\001\001\000\022" +
    "\003\047\004\055\005\132\006\054\007\056\010\060\013" +
    "\046\014\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\140\004\055\014\061\001\001\000\002\001\001" +
    "\000\022\003\047\004\055\005\142\006\054\007\056\010" +
    "\060\013\046\014\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\152\021\026\001\001\000\004\013\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList e = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_list ::= dec_list var_dec 
            {
              DecList RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList dec = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DecList d = dec;
                     while(d.tail != null)
                       d = d.tail;
                     d.tail = new DecList(vd, null);
                     RESULT = dec; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list ::= dec_list fun_dec 
            {
              DecList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec fd = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DecList d = dl;
                     while(d.tail != null)
                       d = d.tail;
                     d.tail = new DecList(fd, null);
                     RESULT = dl; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_list ::= var_dec 
            {
              DecList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(v, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_list ::= fun_dec 
            {
              DecList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec f = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(f, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_list ::= error 
            {
              DecList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.report_error("Syntax error in Declaration List", e);
                    RESULT = null;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_dec ::= type_specifier ID SEMI 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SimpleDec(tleft, t, i, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_dec ::= type_specifier ID LBRACK NUM RBRACK SEMI 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ArrayDec(tleft, t, i, new IntExp(nleft, nright, n), 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_dec ::= error ID SEMI 
            {
              VarDec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Invalid syntax in variable type declaration", e);
                   RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_dec ::= type_specifier error SEMI 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Invalid syntax in variable name declaration", e);
                   RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_dec ::= type_specifier ID error 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid syntax in variable declaration missing ;", e);
                   RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_specifier ::= INT 
            {
              NameTy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameTy(ileft, NameTy.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_specifier ::= VOID 
            {
              NameTy RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameTy(vleft, NameTy.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fun_dec ::= type_specifier ID LPAREN param_list RPAREN comp_stmt 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList pl = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(tleft, t, i, pl, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_dec",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fun_dec ::= type_specifier ID LPAREN VOID RPAREN comp_stmt 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(tleft, t, i, null, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_dec",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fun_dec ::= type_specifier ID LPAREN param_list RPAREN error 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList pl = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 report_error("Function Declaration error", e);
                      RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_dec",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param_list ::= param_list COMMA param 
            {
              VarDecList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList pl = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VarDecList v = pl;
                     while(v.tail != null)
                       v = v.tail;
                     v.tail = new VarDecList(p, null);
                     RESULT = pl;   
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param_list ::= param 
            {
              VarDecList RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec z = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecList(z, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param_list ::= error 
            {
              VarDecList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.report_error("Syntax error in parameters of function declaration", e);
                    RESULT = null;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= type_specifier ID 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDec(tleft, t, i, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= type_specifier ID LBRACK RBRACK 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayDec(tleft, t, i, null, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comp_stmt ::= LBRACE loc_dec stmt_list RBRACE 
            {
              CompoundExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList d = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList s = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundExp(lleft, d, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // loc_dec ::= loc_dec var_dec 
            {
              VarDecList RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecList ld = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VarDecList v = ld;
                     while(v.tail != null)
                       v = v.tail;

                     v.tail = new VarDecList(vd, null);
                     RESULT = ld;   
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc_dec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // loc_dec ::= 
            {
              VarDecList RESULT =null;
		 RESULT = new VarDecList(null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc_dec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt_list ::= stmt_list stmt 
            {
              ExpList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpList t = sl;
                      while( t.tail != null )
                        t = t.tail;
                      t.tail = new ExpList(s, null);
                      RESULT = sl;  
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt_list ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= exp SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= SEMI 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NilExp(sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= comp_stmt 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= selection_stmt 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= iteration_stmt 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= return_stmt 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= error 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid syntax in statement", t);
                   RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // selection_stmt ::= IF LPAREN exp RPAREN stmt 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(ileft, e, s, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // selection_stmt ::= IF LPAREN exp RPAREN stmt ELSE stmt 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(ileft, e, s, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iteration_stmt ::= WHILE LPAREN exp RPAREN stmt 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_stmt ::= RETURN exp SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnExp(rleft, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return_stmt ::= RETURN SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnExp(rleft, new NilExp(rleft)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= var EQ exp 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(vleft, v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp LTE exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.LTE, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp LT exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.LT, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp GT exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.GT, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp GTE exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.GTE, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp COMPARE exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.COMPARE, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp NEQ exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.NEQ, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.PLUS, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.MINUS, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp TIMES exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.TIMES, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp OVER exp 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.OVER, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var ::= ID 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleVar(ileft, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var ::= ID LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IndexVar(ileft, i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= var 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExp(vleft, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= ID LPAREN arg_list RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList a = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(ileft, i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= ID LPAREN RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExp(ileft, i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= NUM 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntExp(nleft, nright, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arg_list ::= arg_list COMMA exp 
            {
              ExpList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList a = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpList t = a;
                      while( t.tail != null )
                        t = t.tail;
                      t.tail = new ExpList(e, null);
                      RESULT = a;  
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arg_list ::= exp 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
